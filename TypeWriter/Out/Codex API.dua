{
  "Code":{
    "ga.codex.api.Main":"local Package = {}\n\nfunction Package.OnInitialize()\n\n    LoadPackage(\"./Libraries/duabase.dua\")\n    LoadPackage(\"./Libraries/Logger.dua\")\n    LoadPackage(\"./Libraries/Replit-Helper.dua\")\n\n\n    local App = require(\"weblit\").app\n    local Database = Import(\"ga.codex.api.Database\")()\n\n    Import(\"ga.codex.api.App\")(App, Database)\n    \n\nend\n\nreturn Package",
    "ga.codex.api.Database":"return function ()\r\n    local Connection = require(\"rethink-luvit\").connect(\r\n        {\r\n            host = \"127.0.0.1\",\r\n            port = 28015,\r\n        }\r\n    )\r\n\r\n    local Found = false\r\n    for Index, Value in pairs(({Connection.r.db_list():run()})[2][1]) do\r\n        if Value == \"Codex\" then\r\n            Found = true\r\n            break\r\n        end\r\n    end\r\n    if Found == false then\r\n        Connection.r.db_create(\"Codex\"):run()\r\n    end\r\n    \r\n    local Database = Connection.r.db(\"Codex\")\r\n\r\n\r\n    local UserData = false\r\n    local Sessions = false\r\n    local Instances = false\r\n\r\n    for Index, Value in pairs( ( { Database.table_list():run() } )[2][1] ) do\r\n        if Value == \"UserData\" then\r\n            UserData = true\r\n        end\r\n        if Value == \"Sessions\" then\r\n            Sessions = true\r\n        end\r\n        if Value == \"Instances\" then\r\n            Instances = true\r\n        end\r\n    end\r\n    \r\n    if UserData == false then\r\n        Database.table_create(\"UserData\"):run()\r\n    end\r\n    if Sessions == false then\r\n        Database.table_create(\"Sessions\"):run()\r\n    end\r\n    if Instances == false then\r\n        Database.table_create(\"Instances\"):run()\r\n    end\r\n\r\n    return Database\r\nend",
    "ga.codex.api.Libraries.JsonRequest":"return function (...)\r\n    local WebRequest = require(\"coro-http\").request\r\n    \r\n    local Response, Body = WebRequest(...)\r\n\r\n    return Response, Json.decode(Body)\r\nend",
    "ga.codex.api.App":"return function (App, Database)\r\n\r\n    local Endpoints = Import(\"ga.codex.api.Endpoints.List\")\r\n\r\n    App.bind({\r\n        host = \"0.0.0.0\",\r\n        port = 5343\r\n    })\r\n\r\n    App.use(require(\"weblit\")[\"auto-headers\"])\r\n    App.use(require(\"weblit-cors\"))\r\n\r\n\r\n    App.route(\r\n        {\r\n            method = \"GET\",\r\n            path = \"/\"\r\n        },\r\n        function (Request, Response)\r\n            Response.code = 200\r\n            Response.body = Json.encode(\"OwO Whats this?\")\r\n        end\r\n    )\r\n\r\n    for Index, Endpoint in pairs(Endpoints) do\r\n        Import(Endpoint)(App, Database)\r\n    end\r\n    \r\n    App.start()\r\nend",
    "ga.codex.api.Endpoints.List":"return {\r\n    \"ga.codex.api.Endpoints.StartSession.Main\",\r\n    \"ga.codex.api.Endpoints.UpdateReplit.Main\",\r\n    \"ga.codex.api.Endpoints.Instances.Main\"\r\n\r\n\r\n}",
    "ga.codex.api.Endpoints.Instances.Main":"return function (App, Database)\r\n    local JsonRequest = Import(\"ga.codex.api.Libraries.JsonRequest\")\r\n\r\n    App.route(\r\n        {\r\n            method = \"GET\",\r\n            path = \"/API/Instances\"\r\n        },\r\n        function (Request, Response)\r\n            Response.body = Json.encode(\r\n                {\r\n                    {\r\n                        Name = \"Abc\",\r\n                        Online = true\r\n                    },\r\n                    {\r\n                        Name = \"Def\",\r\n                        Online = true\r\n                    }\r\n                }\r\n            )\r\n            Response.code = 200\r\n        end\r\n    )\r\nend",
    "ga.codex.api.Endpoints.UpdateReplit.Main":"return function (App, Database)\r\n    local JsonRequest = Import(\"ga.codex.api.Libraries.JsonRequest\")\r\n\r\n    App.route(\r\n        {\r\n            method = \"GET\",\r\n            path = \"/API/UpdateReplit\"\r\n        },\r\n        function (Request, Response)\r\n            Response.body = \"No token\"\r\n            if not Request.query then return end\r\n            if not Request.query.name then return end\r\n            if not Request.query.id then return end\r\n            p(Request.query)\r\n        end\r\n    )\r\nend",
    "ga.codex.api.Endpoints.StartSession.Main":"return function (App, Database)\r\n    local JsonRequest = Import(\"ga.codex.api.Libraries.JsonRequest\")\r\n    local QueryString = require(\"querystring\")\r\n    local Tokens = loadstring(FS.readFileSync(\"./Tokens.lua\"))()\r\n\r\n    local UserDataTable = Database.table(\"UserData\")\r\n    local SessionTable = Database.table(\"Sessions\")\r\n\r\n    local function GetIpFromRequest(Request)\r\n        return require(\"uv\").tcp_getpeername(Request.socket)\r\n    end\r\n\r\n    App.route(\r\n        {\r\n            method = \"GET\",\r\n            path = \"/API/StartSession\"\r\n        },\r\n        function (Request, Response)\r\n\r\n            if not Request.query then return end\r\n            if not Request.query.code then return end\r\n            if not Request.query.url then return end\r\n\r\n            local WebResponse, CodeData = JsonRequest(\r\n                \"POST\",\r\n                \"https://discord.com/api/v8/oauth2/token\",\r\n                {\r\n                    {'Content-Type', 'application/x-www-form-urlencoded'}\r\n                },\r\n                \r\n                QueryString.stringify(\r\n                    {\r\n                        [\"client_id\"] = Tokens.ClientId,\r\n                        [\"client_secret\"] = Tokens.ClientSecret,\r\n                        [\"grant_type\"] = \"authorization_code\",\r\n\r\n                        [\"code\"] = Request.query.code,\r\n                        [\"redirect_uri\"] = Request.query.url\r\n                    }\r\n                )\r\n                \r\n            )\r\n\r\n            p(CodeData)\r\n\r\n            local UserResponse, UserData = JsonRequest(\r\n                \"GET\",\r\n                \"https://discord.com/api/v8/users/@me\",\r\n                {\r\n                    {\"authorization\", CodeData[\"token_type\"] .. \" \" .. CodeData[\"access_token\"]}\r\n                }\r\n            )\r\n\r\n            local AuthResponse, AuthData = JsonRequest(\r\n                \"GET\",\r\n                \"https://discord.com/api/v8/oauth2/@me\",\r\n                {\r\n                    {\"authorization\", CodeData[\"token_type\"] .. \" \" .. CodeData[\"access_token\"]}\r\n                }\r\n            )\r\n\r\n            local UserId = UserData.id\r\n\r\n            local WriteData = {}\r\n            UserData.flags = nil\r\n            UserData.public_flags = nil\r\n            UserData.TagName = UserData.username .. \"#\" .. UserData.discriminator\r\n            UserData.discriminator = nil\r\n            UserData.username = nil\r\n            UserData.id = nil\r\n\r\n            WriteData.DiscordData = UserData\r\n            WriteData.id = UserId\r\n\r\n            local New = false\r\n\r\n\r\n            if not ({UserDataTable.get(UserId):run()})[2] then\r\n                WriteData.New = false\r\n            else\r\n                New = true\r\n                p(1)\r\n                p(\r\n                    UserDataTable.insert(\r\n                        WriteData\r\n                    ):run({ optargs = {conflict = \"replace\" } })\r\n                )\r\n            end\r\n\r\n            local ReturnData = {\r\n                SessionId = Request.query.code,\r\n                SessionExpire = AuthData.expires,\r\n                UserId = UserId,\r\n                DiscordUser = UserData,\r\n                DiscordAccess = {\r\n                    AccessToken = CodeData[\"access_token\"],\r\n                    TokenType = CodeData[\"token_type\"]\r\n                },\r\n                New = New\r\n            }\r\n\r\n            Response.code = 200\r\n            Response.body = Json.encode(ReturnData)\r\n        end\r\n    )\r\nend"
  },
  "PackageInfo":{
    "Author":{
      "Contributors":[],
      "Developers":["Codex Team","CoreByte"]
    },
    "Contact":{
      "Source":"https://github.com/codex-bot-team",
      "Socials":[],
      "Website":"http://codex-bot.ga"
    },
    "Dependencies":{
      "Luvit":["creationix/weblit","creationix/coro-http","luvit/secure-socket","luvit/querystring","truemedian/rethink-luvit"],
      "Dua":[]
    },
    "InfoVersion":1,
    "Name":"Codex API",
    "Version":"1.0.0",
    "ID":"codexapi",
    "Description":"API for Codex",
    "Entrypoints":{
      "Main":"ga.codex.api.Main"
    }
  },
  "Resources":{
    "/package.info.lua":"cmV0dXJuIHsKCiAgICBJbmZvVmVyc2lvbiA9IDEsIC0tIERvbnQgdG91Y2ggdGhpcwoKICAgIElEID0gImNvZGV4YXBpIiwgLS0gQSB1bmlxdWUgaWQgCiAgICBWZXJzaW9uID0gIjEuMC4wIiwgLS0gVGhlIHBhY2thZ2UgdmVyc2lvbgoKICAgIE5hbWUgPSAiQ29kZXggQVBJIiwgLS0gVGhlIG5hbWUgb2YgdGhlIHByb2plY3QsIGNhbiB1c2Ugc3BhY2VzCiAgICBEZXNjcmlwdGlvbiA9ICJBUEkgZm9yIENvZGV4IiwgLS0gRGVzY3JpcHRpb24KCiAgICBBdXRob3IgPSB7CiAgICAgICAgRGV2ZWxvcGVycyA9IHsKICAgICAgICAgICAgIkNvZGV4IFRlYW0iLAogICAgICAgICAgICAiQ29yZUJ5dGUiCiAgICAgICAgfSwKICAgICAgICBDb250cmlidXRvcnMgPSB7fQogICAgfSwKCiAgICBEZXBlbmRlbmNpZXMgPSB7CiAgICAgICAgTHV2aXQgPSB7CiAgICAgICAgICAgICJjcmVhdGlvbml4L3dlYmxpdCIsCiAgICAgICAgICAgICJjcmVhdGlvbml4L2Nvcm8taHR0cCIsCiAgICAgICAgICAgICJsdXZpdC9zZWN1cmUtc29ja2V0IiwKICAgICAgICAgICAgImx1dml0L3F1ZXJ5c3RyaW5nIiwKICAgICAgICAgICAgCiAgICAgICAgICAgICJ0cnVlbWVkaWFuL3JldGhpbmstbHV2aXQiCiAgICAgICAgfSwKICAgICAgICBEdWEgPSB7fQogICAgfSwKCiAgICBDb250YWN0ID0gewogICAgICAgIFdlYnNpdGUgPSAiaHR0cDovL2NvZGV4LWJvdC5nYSIsIC0tIEhvbWVwYWdlCiAgICAgICAgU291cmNlID0gImh0dHBzOi8vZ2l0aHViLmNvbS9jb2RleC1ib3QtdGVhbSIsIC0tIEdpdGh1YiByZXBybwogICAgICAgIFNvY2lhbHMgPSB7fQogICAgfSwKCiAgICBFbnRyeXBvaW50cyA9IHsKICAgICAgICBNYWluID0gImdhLmNvZGV4LmFwaS5NYWluIgogICAgfQoKfQo="
  }
}